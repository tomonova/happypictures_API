DROP TABLE TAG_STORY;
DROP TABLE TAG_CARD;
drop table tags;
drop table LIKES;
--drop table IMAGE_STORY;
DROP TABLE STORIES;
DROP TABLE CARDS;
drop table formats;
DROP TABLE SCHEDULE_IMAGE;
DROP TABLE SCHEDULES 
drop table images;
drop table profiles;

CREATE TABLE AspNetRoles (
	Id nvarchar(128) COLLATE Slovenian_CI_AS NOT NULL,
	Name nvarchar(256) COLLATE Slovenian_CI_AS NOT NULL,
	CONSTRAINT [PK_dbo.AspNetRoles] PRIMARY KEY (Id)
) 
CREATE  UNIQUE NONCLUSTERED INDEX RoleNameIndex ON dbo.AspNetRoles (  Name ASC  )  
	WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  )
	ON [PRIMARY ]

CREATE TABLE AspNetUsers (
	Id nvarchar(128) COLLATE Slovenian_CI_AS NOT NULL,
	Email nvarchar(256) COLLATE Slovenian_CI_AS NULL,
	EmailConfirmed bit NOT NULL,
	PasswordHash nvarchar COLLATE Slovenian_CI_AS NULL,
	SecurityStamp nvarchar COLLATE Slovenian_CI_AS NULL,
	PhoneNumber nvarchar COLLATE Slovenian_CI_AS NULL,
	PhoneNumberConfirmed bit NOT NULL,
	TwoFactorEnabled bit NOT NULL,
	LockoutEndDateUtc datetime NULL,
	LockoutEnabled bit NOT NULL,
	AccessFailedCount int NOT NULL,
	UserName nvarchar(256) COLLATE Slovenian_CI_AS NOT NULL,
	CONSTRAINT [PK_dbo.AspNetUsers] PRIMARY KEY (Id)
)
CREATE  UNIQUE NONCLUSTERED INDEX UserNameIndex ON dbo.AspNetUsers (  UserName ASC  )  
	WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  )
	ON [PRIMARY ]

CREATE TABLE AspNetUserClaims (
	Id int IDENTITY(1,1) NOT NULL,
	UserId nvarchar(128) COLLATE Slovenian_CI_AS NOT NULL,
	ClaimType nvarchar COLLATE Slovenian_CI_AS NULL,
	ClaimValue nvarchar COLLATE Slovenian_CI_AS NULL,
	CONSTRAINT [PK_dbo.AspNetUserClaims] PRIMARY KEY (Id),
	CONSTRAINT [FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId] FOREIGN KEY (UserId) REFERENCES AspNetUsers(Id) ON DELETE CASCADE
)
CREATE NONCLUSTERED INDEX IX_UserId ON dbo.AspNetUserClaims (  UserId ASC  )  
	WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  )
	ON [PRIMARY ]

CREATE TABLE AspNetUserLogins (
	LoginProvider nvarchar(128) COLLATE Slovenian_CI_AS NOT NULL,
	ProviderKey nvarchar(128) COLLATE Slovenian_CI_AS NOT NULL,
	UserId nvarchar(128) COLLATE Slovenian_CI_AS NOT NULL,
	CONSTRAINT [PK_dbo.AspNetUserLogins] PRIMARY KEY (LoginProvider,ProviderKey,UserId),
	CONSTRAINT [FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId] FOREIGN KEY (UserId) REFERENCES AspNetUsers(Id) ON DELETE CASCADE
)
CREATE NONCLUSTERED INDEX IX_UserId ON dbo.AspNetUserLogins (  UserId ASC  )  
	WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  )
	ON [PRIMARY ]

CREATE TABLE AspNetUserRoles (
	UserId nvarchar(128) COLLATE Slovenian_CI_AS NOT NULL,
	RoleId nvarchar(128) COLLATE Slovenian_CI_AS NOT NULL,
	CONSTRAINT [PK_dbo.AspNetUserRoles] PRIMARY KEY (UserId,RoleId),
	CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId] FOREIGN KEY (RoleId) REFERENCES AspNetRoles(Id) ON DELETE CASCADE,
	CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId] FOREIGN KEY (UserId) REFERENCES AspNetUsers(Id) ON DELETE CASCADE
)
CREATE NONCLUSTERED INDEX IX_RoleId ON dbo.AspNetUserRoles (  RoleId ASC  )  
	WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  )
	ON [PRIMARY ]
CREATE NONCLUSTERED INDEX IX_UserId ON dbo.AspNetUserRoles (  UserId ASC  )  
	WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  )
	ON [PRIMARY ]

CREATE TABLE PROFILES
(
	IDPROFILE INT NOT NULL IDENTITY(1,1),
	FIRSTNAME NVARCHAR(250),
	LASTNAME NVARCHAR(250),
	NICKNAME NVARCHAR(250),
	BIO NVARCHAR(MAX),
	DELETED INT NOT NULL DEFAULT(0),
	USERID NVARCHAR(128) not null,
	EMAIL NVARCHAR(max),
	CONSTRAINT FKUSER_PROFILE FOREIGN KEY (USERID) REFERENCES AspNetUsers(Id),
	CONSTRAINT PKPROFILES PRIMARY KEY(IDPROFILE)
)
CREATE TABLE IMAGES
(
	IDIMAGE INT NOT NULL IDENTITY(1,1),
	URL NVARCHAR(MAX),
	IMGTIMESTAMP DATETIME not null default (GETDATE()),
	PROFILEID INT NOT NULL,
	SHARED INT NOT NULL DEFAULT(0),
	DELETED INT NOT NULL DEFAULT(0),
	CONSTRAINT PKIMAGES primary key (IDIMAGE),
	CONSTRAINT FKIMAGES FOREIGN KEY (PROFILEID) REFERENCES PROFILES(IDPROFILE)
)
CREATE TABLE FORMATS
(
	IDFORMAT INT NOT NULL IDENTITY(1,1),
	COLOR NVARCHAR(50),
	FONT_SIZE INT DEFAULT(1),
	FONT_FORMAT INT DEFAULT(0),
	LAYOUT INT DEFAULT(1),
	IMG1ID INT,
	IMG2ID INT,
	IMG3ID INT,
	CONSTRAINT FKIMAGE1_FORMATS FOREIGN KEY (IMG1ID) REFERENCES IMAGES(IDIMAGE),
	CONSTRAINT FKIMAGE2_FORMATS FOREIGN KEY (IMG2ID) REFERENCES IMAGES(IDIMAGE),
	CONSTRAINT FKIMAGE3_FORMATS FOREIGN KEY (IMG3ID) REFERENCES IMAGES(IDIMAGE),
	CONSTRAINT PKFORMATS PRIMARY KEY(IDFORMAT)
)
CREATE TABLE TAGS
(
	IDTAG INT NOT NULL IDENTITY(1,1),
	VALUE NVARCHAR(100) NOT NULL,
	TYPE INT DEFAULT(0),
	CONSTRAINT PKTAGS PRIMARY KEY(IDTAG)
)
CREATE TABLE CARDS
(
	IDCARD INT NOT NULL IDENTITY(1,1),
	NAME NVARCHAR(250),
	TEXT NVARCHAR(MAX),
	SHARED INT NOT NULL DEFAULT(0),
	DELETED INT NOT NULL DEFAULT(0),
	PROFILEID INT NOT NULL,
	FORMATID INT,
	CONSTRAINT PKCARDS PRIMARY KEY(IDCARD),
	CONSTRAINT FKPROFILES_CARDS FOREIGN KEY(PROFILEID) REFERENCES PROFILES(IDPROFILE),
	CONSTRAINT FKFORMATS_CARDS FOREIGN KEY(FORMATID) REFERENCES FORMATS(IDFORMAT)
)
CREATE TABLE TAG_CARD
(
	--IDTAG_CARD INT NOT NULL IDENTITY(1,1),
	TAGID INT NOT NULL,
	CARDID INT NOT NULL,
	--CONSTRAINT PKTAG_CARD PRIMARY KEY(IDTAG_CARD),
	CONSTRAINT FKTAG_CARD FOREIGN KEY (TAGID) REFERENCES TAGS(IDTAG),
	CONSTRAINT FKCARD_TAG FOREIGN KEY (CARDID) REFERENCES CARDS(IDCARD),
	CONSTRAINT PKTAG_CARD PRIMARY KEY (TAGID,CARDID)
)
CREATE TABLE STORIES
(
	IDSTORY INT NOT NULL IDENTITY(1,1),
	NAME NVARCHAR(250),
	DESCRIPTION NVARCHAR(MAX),
	THUMBNAIL INT,
	SHARED INT NOT NULL DEFAULT(0),
	FAVOURITE INT NOT NULL DEFAULT(0),
	DELETED INT NOT NULL DEFAULT(0),
	PROFILEID INT NOT NULL,
	CONSTRAINT PKSTORY PRIMARY KEY(IDSTORY),
	CONSTRAINT FKPROFILE_STORY FOREIGN KEY (PROFILEID) REFERENCES PROFILES(IDPROFILE),
	CONSTRAINT FKTHUMBNAIL FOREIGN KEY (THUMBNAIL) REFERENCES IMAGES(IDIMAGE)
)
CREATE TABLE STORY_CARD
(
	--IDSTORY_CARD INT NOT NULL IDENTITY(1,1),
	STORYID INT NOT NULL,
	CARDID INT NOT NULL,
	CARD_ORDER INT NOT NULL,
	--CONSTRAINT PKSTORY_CARD PRIMARY KEY(IDSTORY_CARD),
	CONSTRAINT FKSTORY_CARD FOREIGN KEY (STORYID) REFERENCES STORIES(IDSTORY),
	CONSTRAINT FKCARD_STORY FOREIGN KEY (CARDID) REFERENCES CARDS(IDCARD),
	CONSTRAINT PKSTORY_CARD PRIMARY KEY (STORYID,CARDID)
)
--CREATE TABLE IMAGE_STORY
--(
--	--IDIMAGE_STORY INT NOT NULL IDENTITY(1,1),
--	IMAGEID INT,
--	STORYID INT,
--	CONSTRAINT FKIMAGE_STORY FOREIGN KEY (IMAGEID) REFERENCES IMAGES(IDIMAGE),
--	CONSTRAINT FKSTORY_IMAGE FOREIGN KEY (STORYID) REFERENCES STORIES(IDSTORY),
--	CONSTRAINT PKIMAGE_STORY PRIMARY KEY(IMAGEID,STORYID)
--)
CREATE TABLE TAG_STORY
(
	--IDTAG_STORY INT NOT NULL IDENTITY(1,1),
	TAGID INT NOT NULL,
	STORYID INT NOT NULL,
	--CONSTRAINT PKTAG_STORY PRIMARY KEY(IDTAG_STORY),
	CONSTRAINT FKTAG_STORY FOREIGN KEY (TAGID) REFERENCES TAGS(IDTAG),
	CONSTRAINT FKSTORY_TAG FOREIGN KEY (STORYID) REFERENCES STORIES(IDSTORY),
	CONSTRAINT PKTAG_STORY PRIMARY KEY (TAGID,STORYID)
)
CREATE TABLE LIKES
(
	IDLIKE INT NOT NULL IDENTITY(1,1),
	PROFILEID INT,
	STORYID INT,
	CONSTRAINT PKLIKE PRIMARY KEY(PROFILEID,STORYID),
	CONSTRAINT FKPROFILE FOREIGN KEY (PROFILEID)  REFERENCES PROFILES(IDPROFILE),
	CONSTRAINT FKSTORY FOREIGN KEY (STORYID) REFERENCES STORIES(IDSTORY)
)

CREATE TABLE SCHEDULES
(
	IDSCHEDULE INT NOT NULL IDENTITY(1,1),
	SCHEDULE_DATE DATE NOT NULL,
	PROFILEID INT,
	CONSTRAINT PKSCHEDULE PRIMARY KEY(IDSCHEDULE),
	CONSTRAINT FKPROFILE_SCHEDULE FOREIGN KEY (PROFILEID) REFERENCES PROFILES(IDPROFILE),
	CONSTRAINT UQSQCEHDULES UNIQUE(SCHEDULE_DATE,PROFILEID)
)
CREATE TABLE SCHEDULE_IMAGE
(
	IDSCHEDULE_IMAGE INT NOT NULL IDENTITY(1,1),
	POSITION INT NOT NULL,
	SCHEDULEID INT NOT NULL,
	IMAGEID INT NOT NULL,
	CONSTRAINT PKSCHEDULE_IMAGE PRIMARY KEY (IDSCHEDULE_IMAGE),
	CONSTRAINT FKSCHEDULE_IMAGE FOREIGN KEY (SCHEDULEID) REFERENCES SCHEDULES(IDSCHEDULE),
	CONSTRAINT FKIMAGE_SCHEDULE FOREIGN KEY (IMAGEID) REFERENCES IMAGES(IDIMAGE)
)
GO
CREATE PROCEDURE GetAdminID
@Email nvarchar(256)
AS
select p.IDPROFILE from PROFILES p
inner join AspNetUsers anu on anu.Id = p.USERID
where anu.Email=@Email
go
create or alter procedure CreateUSerID
@email nvarchar(100)
as
insert into PROFILES(USERID) select id from AspNetUsers where Email=@email
go
create or alter procedure ReturnUserID
@email nvarchar(100),
@userid nvarchar(100) output
as
select @userid = Id from AspNetUsers
where Email=@email
go
create or alter procedure GetUser
@email nvarchar(100)
as
select * from PROFILES p
join AspNetUsers anu on anu.id = p.USERID
where anu.Email=@email
go
USE [OICAR19]
GO
/****** Object:  StoredProcedure [dbo].[DeleteUser]    Script Date: 8.2.2022. 17:58:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER   PROCEDURE [dbo].[DeleteUser]
@userID INT
AS
BEGIN
	SET NOCOUNT ON;
	--DECLARE VARIABLES
	print 'decalre varaiable'
	DECLARE 
		@FormatID INT,
		@CardID INT,
		@StoryID INT,
		@ImageID INT,
		@ScheduleID INT,
		@TagID INT,
		@LikeID INT,
		@Email nvarchar(max)

	--DECLARE LIKE CURSOR

	DECLARE LikeIDs CURSOR READ_ONLY
	FOR
	SELECT IDLIKE FROM LIKES
	WHERE PROFILEID=@userID
	PRINT 'CURSORS LIKES'
	--DELETE LIKES
	OPEN LikeIDs
	print  @@FETCH_STATUS
	FETCH NEXT FROM LikeIDs INTO @LikeID
	WHILE @@FETCH_STATUS = 0
	BEGIN 
		DELETE FROM LIKES
		WHERE IDLIKE=@LikeID
		FETCH NEXT FROM LikeIDs INTO @LikeID
	END;
	print  @@FETCH_STATUS
	CLOSE LikeIDs
	DEALLOCATE LikeIDs
	PRINT 'OBRISANI LIKES'

	--DECLARE TAGS CURSOR
	DECLARE TagIDs CURSOR READ_ONLY
	FOR
	SELECT TAGID FROM TAG_CARD tc
	JOIN TAGS t ON t.IDTAG=tc.TAGID
	JOIN CARDS c ON c.IDCARD =tc.CARDID
	WHERE CARDID IN 
		(
			SELECT IDCARD FROM CARDS
			WHERE PROFILEID=@userID
		)
	UNION
	SELECT TAGID FROM TAG_STORY ts
	JOIN TAGS t ON t.IDTAG=ts.TAGID
	JOIN STORIES s ON s.IDSTORY =ts.STORYID
	WHERE STORYID IN 
		(
			SELECT IDSTORY FROM STORIES
			WHERE PROFILEID=@userID
		) 
	PRINT 'CURSORS TAGS'
	print  @@FETCH_STATUS
	--DELETE TAGS
	OPEN TagIDs
	FETCH NEXT FROM TagIDs INTO @TagID
	print  @@FETCH_STATUS
	WHILE @@FETCH_STATUS = 0
	BEGIN 
		DELETE FROM TAG_STORY
		WHERE TAGID=@TagID
		DELETE FROM TAG_CARD
		WHERE TAGID=@TagID
		FETCH NEXT FROM TagIDs INTO @TagID
	END;
	
	CLOSE TagIDs
	DEALLOCATE TagIDs
	DELETE FROM TAGS
	WHERE IDTAG IN
	(
		SELECT t.IDTAG FROM TAGS t 
		FULL OUTER JOIN tag_card tc ON tc.TAGID = t.IDTAG
		FULL OUTER JOIN TAG_STORY ts ON ts.TAGID = t.IDTAG
		WHERE (tc.CARDID IS NULL AND ts.STORYID IS NULL)
	)
	PRINT 'OBRISANI TAGS'
	--DECLARE SCHEDULES
	DECLARE ScheduleIDs CURSOR READ_ONLY
	FOR
	SELECT IDSCHEDULE FROM SCHEDULES
	WHERE PROFILEID=@userID
	PRINT 'CURSORS SCHEDULES'
	--DELETE SCHEDULES
	OPEN ScheduleIDs
	FETCH NEXT FROM ScheduleIDs INTO @ScheduleID
	WHILE @@FETCH_STATUS = 0
	BEGIN
		DELETE FROM SCHEDULE_IMAGE
		WHERE SCHEDULEID = @ScheduleID
		DELETE FROM SCHEDULES
		WHERE IDSCHEDULE=@ScheduleID
		FETCH NEXT FROM ScheduleIDs INTO @ScheduleID
	END;
	CLOSE ScheduleIDs
	DEALLOCATE ScheduleIDs
	PRINT 'OBRISANI SCHEDULES'
	--DECLARE STORIES
	DECLARE StoryIDs CURSOR READ_ONLY
	FOR
	SELECT IDSTORY FROM STORIES
	WHERE PROFILEID=@userID
	PRINT 'CURSORS STORIES'
	print  @@FETCH_STATUS
	--DELETE STORIES
	OPEN StoryIDs
	FETCH NEXT FROM StoryIDs INTO @StoryID
	WHILE @@FETCH_STATUS = 0
	BEGIN
		DELETE FROM STORY_CARD
		WHERE STORYID =@StoryID
		DELETE FROM STORIES
		WHERE IDSTORY =@StoryID
		FETCH NEXT FROM StoryIDs INTO @StoryID
	END;
	CLOSE StoryIDs
	DEALLOCATE StoryIDs
	PRINT 'OBRISANI STORIES'
	--DECLARE CARDS
	DECLARE CardIDs CURSOR READ_ONLY
	FOR 
	SELECT IDCARD from CARDS
	WHERE PROFILEID=3
	PRINT 'CURSORS CARDS'
	--DELETE CARDS
	OPEN CardIDs
	FETCH NEXT FROM CardIDs INTO @CardID
	WHILE @@FETCH_STATUS = 0
	BEGIN
		DELETE FROM CARDS
		WHERE IDCARD=@CardID
		FETCH NEXT FROM CardIDs INTO @CardID
	END;
	CLOSE CardIDs
	DEALLOCATE CardIDs
	PRINT 'OBRISANI CARDS'	
	--DECLARE FORMATS
	DECLARE FormatIDs CURSOR READ_ONLY
	FOR
	SELECT FORMATID FROM CARDS
	WHERE PROFILEID=@userID
	PRINT 'CURSORS FORMAT'
	--DELETE FORMATS
	OPEN FormatIDs
	FETCH NEXT FROM FormatIDs INTO @FormatID
	WHILE @@FETCH_STATUS = 0
	BEGIN
		DELETE FROM FORMATS
		WHERE IDFORMAT =@FormatID
		FETCH NEXT FROM FormatIDs INTO @FormatID
	END;
	CLOSE FormatIDs
	DEALLOCATE FormatIDs
	PRINT 'OBRISANI FORMATS'
	--DECLARE IMAGES
	DECLARE ImageIDs CURSOR READ_ONLY
	FOR
	SELECT IDIMAGE FROM IMAGES
	WHERE PROFILEID=@userID
	PRINT 'CURSORS IMAGES'
	--DELETE IMAGES
	OPEN ImageIDs
	FETCH NEXT FROM ImageIDs INTO @ImageID
	WHILE @@FETCH_STATUS = 0
	BEGIN
		DELETE FROM IMAGES
		WHERE IDIMAGE = @ImageID
		FETCH NEXT FROM ImageIDs INTO @ImageID
	END;
	CLOSE ImageIDs
	DEALLOCATE ImageIDs
	PRINT 'OBRISANI IMAGES'
	SELECT @Email = EMAIL fROM PROFILES
	WHERE IDPROFILE=@userID
	DELETE FROM PROFILES
	WHERE IDPROFILE=@userID
	SELECT @userID = Id	FROM AspNetUsers
	where Email = @Email
	delete from AspNetUserLogins
	where UserId = (SELECT  Id	FROM AspNetUsers
	where Email = @Email)
	delete from AspNetUsers
	where Email=@Email
END;